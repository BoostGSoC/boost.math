
///////////////////////////////////////////////////////////////////////////////
//  Copyright 2013 Nikhar Agrawal
//  Copyright 2013 Christopher Kormanyos
//  Copyright 2013 John Maddock
//  Copyright 2013 Paul Bristow
//  Distributed under the Boost
//  Software License, Version 1.0. (See accompanying file
//  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

#ifndef _BOOST_BERNOULLI_2013_05_30_HPP_
  #define _BOOST_BERNOULLI_2013_05_30_HPP_

  #include <boost/array.hpp>
  #include <boost/cstdint.hpp>
  #include "detail/bernoulli_b2n.hpp"

  namespace boost { namespace math {

  template <class T, class Policy>
  inline T bernoulli_b2n(const unsigned i, const Policy &pol)
  {
    const unsigned i_2 = 2 * i;

    return boost::math::detail::bernoulli_number_imp<T,Policy>(i_2, pol);
  }

  template <class T>
  inline T bernoulli_b2n(const unsigned i)
  {
    return boost::math::bernoulli_b2n<T>(i, policies::policy<>());
  }

  template <class T, class OutputIterator, class Policy>
  inline OutputIterator bernoulli_b2n(unsigned start_index,
                                      unsigned number_of_bernoulis_b2n,
                                      OutputIterator out_it,
                                      const Policy& pol)
  {
    return boost::math::detail::bernoulli_series_imp<T, OutputIterator, Policy>(start_index,
                                                                                number_of_bernoulis_b2n,
                                                                                out_it,
                                                                                policies::policy<>());
  }

  template <class T, class OutputIterator>
  inline OutputIterator bernoulli_b2n(unsigned start_index,
                                      unsigned number_of_bernoulis_b2n,
                                      OutputIterator out_it)
  {
    return boost::math::bernoulli_b2n<T, OutputIterator>(start_index,
                                                         number_of_bernoulis_bn,
                                                         out_it,
                                                         policies::policy<>());
  }

  template <class T>
  struct max_bernoulli_index
  {
    BOOST_STATIC_CONSTANT(unsigned, value = 18);
  };

  template <>
  struct max_bernoulli_index<float>
  {
    BOOST_STATIC_CONSTANT(unsigned, value = 31);
  };

  template <>
  struct max_bernoulli_index<double>
  {
    BOOST_STATIC_CONSTANT(unsigned, value = 129);
  };

  template <>
  struct max_bernoulli_index<long double>
  {
    BOOST_STATIC_CONSTANT(unsigned, value = 129);
  };

  template<class T>
  inline T unchecked_bernoulli_b2n(unsigned n)
  {
    static const boost::array<boost::int64_t, 19U> numerators =
    {{
      boost::int64_t(            +1LL),
      boost::int64_t(            +1LL),
      boost::int64_t(            -1LL),
      boost::int64_t(            +1LL),
      boost::int64_t(            -1LL),
      boost::int64_t(            +5LL),
      boost::int64_t(          -691LL),
      boost::int64_t(            +7LL),
      boost::int64_t(         -3617LL),
      boost::int64_t(        +43867LL),
      boost::int64_t(       -174611LL),
      boost::int64_t(       +854513LL),
      boost::int64_t(    -236364091LL),
      boost::int64_t(      +8553103LL),
      boost::int64_t(  -23749461029LL),
      boost::int64_t(+8615841276005LL),
      boost::int64_t(-7709321041217LL),
      boost::int64_t(+2577687858367LL)
    }};

    static const boost::array<boost::int64_t, 19U> denominators =
    {{
      boost::int64_t(      1LL),
      boost::int64_t(      6LL),
      boost::int64_t(     30LL),
      boost::int64_t(     42LL),
      boost::int64_t(     30LL),
      boost::int64_t(     66LL),
      boost::int64_t(   2730LL),
      boost::int64_t(      6LL),
      boost::int64_t(    510LL),
      boost::int64_t(    798LL),
      boost::int64_t(    330LL),
      boost::int64_t(    138LL),
      boost::int64_t(   2730LL),
      boost::int64_t(      6LL),
      boost::int64_t(    870LL),
      boost::int64_t(  14322LL),
      boost::int64_t(    510LL),
      boost::int64_t(      6LL),
      boost::int64_t(1919190LL)
    }};

    return T(numerators[n]) / denominators[n];
  }

  template<>
  inline float unchecked_bernoulli_b2n<float>(unsigned n)
  {
    static const boost::array<float, 32U> bernoulli_data =
    {{
      +1.00000000000000000000000000000000000000000F,
      +0.166666666666666666666666666666666666666667F,
      -0.0333333333333333333333333333333333333333333F,
      +0.0238095238095238095238095238095238095238095F,
      -0.0333333333333333333333333333333333333333333F,
      +0.0757575757575757575757575757575757575757576F,
      -0.253113553113553113553113553113553113553114F,
      +1.16666666666666666666666666666666666666667F,
      -7.09215686274509803921568627450980392156863F,
      +54.9711779448621553884711779448621553884712F,
      -529.124242424242424242424242424242424242424F,
      +6192.12318840579710144927536231884057971014F,
      -86580.2531135531135531135531135531135531136F,
      +1.42551716666666666666666666666666666666667E6F,
      -2.72982310678160919540229885057471264367816E7F,
      +6.01580873900642368384303868174835916771401E8F,
      -1.51163157670921568627450980392156862745098E10F,
      +4.29614643061166666666666666666666666666667E11F,
      -1.37116552050883327721590879485616327721591E13F,
      +4.88332318973593166666666666666666666666667E14F,
      -1.92965793419400681486326681448632668144863E16F,
      +8.41693047573682615000553709856035437430786E17F,
      -4.03380718540594554130768115942028985507246E19F,
      +2.11507486380819916056014539007092198581560E21F,
      -1.20866265222965259346027311937082525317819E23F,
      +7.50086674607696436685572007575757575757576E24F,
      -5.03877810148106891413789303052201257861635E26F,
      +3.65287764848181233351104308429711779448622E28F,
      -2.84987693024508822262691464329106781609195E30F,
      +2.38654274996836276446459819192192149717514E32F,
      -2.13999492572253336658107447651910973926742E34F,
      +2.05009757234780975699217330956723102516667E36F
    }};

    return bernoulli_data[n];
  }

  template<>
  inline double unchecked_bernoulli_b2n<double>(unsigned n)
  {
    static const boost::array<double, 130U> bernoulli_data =
    {{
      double(+1.00000000000000000000000000000000000000000L),
      double(+0.166666666666666666666666666666666666666667L),
      double(-0.0333333333333333333333333333333333333333333L),
      double(+0.0238095238095238095238095238095238095238095L),
      double(-0.0333333333333333333333333333333333333333333L),
      double(+0.0757575757575757575757575757575757575757576L),
      double(-0.253113553113553113553113553113553113553114L),
      double(+1.16666666666666666666666666666666666666667L),
      double(-7.09215686274509803921568627450980392156863L),
      double(+54.9711779448621553884711779448621553884712L),
      double(-529.124242424242424242424242424242424242424L),
      double(+6192.12318840579710144927536231884057971014L),
      double(-86580.2531135531135531135531135531135531136L),
      double(+1.42551716666666666666666666666666666666667E6L),
      double(-2.72982310678160919540229885057471264367816E7L),
      double(+6.01580873900642368384303868174835916771401E8L),
      double(-1.51163157670921568627450980392156862745098E10L),
      double(+4.29614643061166666666666666666666666666667E11L),
      double(-1.37116552050883327721590879485616327721591E13L),
      double(+4.88332318973593166666666666666666666666667E14L),
      double(-1.92965793419400681486326681448632668144863E16L),
      double(+8.41693047573682615000553709856035437430786E17L),
      double(-4.03380718540594554130768115942028985507246E19L),
      double(+2.11507486380819916056014539007092198581560E21L),
      double(-1.20866265222965259346027311937082525317819E23L),
      double(+7.50086674607696436685572007575757575757576E24L),
      double(-5.03877810148106891413789303052201257861635E26L),
      double(+3.65287764848181233351104308429711779448622E28L),
      double(-2.84987693024508822262691464329106781609195E30L),
      double(+2.38654274996836276446459819192192149717514E32L),
      double(-2.13999492572253336658107447651910973926742E34L),
      double(+2.05009757234780975699217330956723102516667E36L),
      double(-2.09380059113463784090951852900279701847092E38L),
      double(+2.27526964884635155596492603527692645814700E40L),
      double(-2.62577102862395760473030497361582020814490E42L),
      double(+3.21250821027180325182047923042649852435219E44L),
      double(-4.15982781667947109139170744952623589366896E46L),
      double(+5.69206954820352800238834562191210586444805E48L),
      double(-8.21836294197845756922906534686173330145509E50L),
      double(+1.25029043271669930167323398297028955241772E53L),
      double(-2.00155832332483702749253291988132987687242E55L),
      double(+3.36749829153643742333966769033387530162196E57L),
      double(-5.94709705031354477186604968440515408405791E59L),
      double(+1.10119103236279775595641307904376916046305E62L),
      double(-2.13552595452535011886583850190410656789733E64L),
      double(+4.33288969866411924196166130593792062184514E66L),
      double(-9.18855282416693282262005552155018971389604E68L),
      double(+2.03468967763290744934550279902200200659751E71L),
      double(-4.70038339580357310785752555350060606545967E73L),
      double(+1.13180434454842492706751862577339342678904E76L),
      double(-2.83822495706937069592641563364817647382847E78L),
      double(+7.40642489796788506297508271409209841768797E80L),
      double(-2.00964548027566044834656196727153631868673E83L),
      double(+5.66571700508059414457193460305193569614195E85L),
      double(-1.65845111541362169158237133743199123014950E88L),
      double(+5.03688599504923774192894219151801548124424E90L),
      double(-1.58614682376581863693634015729664387827410E93L),
      double(+5.17567436175456269840732406825071225612408E95L),
      double(-1.74889218402171173396900258776181591451415E98L),
      double(+6.11605199949521852558245252642641677807677E100L),
      double(-2.21227769127078349422883234567129324455732E103L),
      double(+8.27227767987709698542210624599845957312047E105L),
      double(-3.19589251114157095835916343691808148735263E108L),
      double(+1.27500822233877929823100243029266798669572E111L),
      double(-5.25009230867741338994028246245651754469199E113L),
      double(+2.23018178942416252098692981988387281437383E116L),
      double(-9.76845219309552044386335133989802393011669E118L),
      double(+4.40983619784529542722726228748131691918758E121L),
      double(-2.05085708864640888397293377275830154864566E124L),
      double(+9.82144332797912771075729696020975210414919E126L),
      double(-4.84126007982088805087891967099634127611305E129L),
      double(+2.45530888014809826097834674040886903996737E132L),
      double(-1.28069268040847475487825132786017857218118E135L),
      double(+6.86761671046685811921018885984644004360924E137L),
      double(-3.78464685819691046949789954163795568144895E140L),
      double(+2.14261012506652915508713231351482720966602E143L),
      double(-1.24567271371836950070196429616376072194583E146L),
      double(+7.43457875510001525436796683940520613117807E148L),
      double(-4.55357953046417048940633332233212748767721E151L),
      double(+2.86121128168588683453638472510172325229190E154L),
      double(-1.84377235520338697276882026536287854875414E157L),
      double(+1.21811545362210466995013165065995213558174E160L),
      double(-8.24821871853141215484818457296893447301419E162L),
      double(+5.72258779378329433296516498142978615918685E165L),
      double(-4.06685305250591047267679693831158655602196E168L),
      double(+2.95960920646420500628752695815851870426379E171L),
      double(-2.20495225651894575090311752273445984836379E174L),
      double(+1.68125970728895998058311525151360665754464E177L),
      double(-1.31167362135569576486452806355817153004431E180L),
      double(+1.04678940094780380821832853929823089643829E183L),
      double(-8.54328935788337077185982546299082774593270E185L),
      double(+7.12878213224865423522884066771438224721245E188L),
      double(-6.08029314555358993000847118686477458461988E191L),
      double(+5.29967764248499239300942910043247266228490E194L),
      double(-4.71942591687458626443646229013379911103761E197L),
      double(+4.29284137914029810894168296541074669045521E200L),
      double(-3.98767449682322074434477655542938795106651E203L),
      double(+3.78197804193588827138944181161393327898220E206L),
      double(-3.66142336836811912436858082151197348755196E209L),
      double(+3.61760902723728623488554609298914089477541E212L),
      double(-3.64707726451913543621383088655499449048682E215L),
      double(+3.75087554364544090983452410104814189306842E218L),
      double(-3.93458672964390282694891288533713429355657E221L),
      double(+4.20882111481900820046571171111494898242731E224L),
      double(-4.59022962206179186559802940573325591059371E227L),
      double(+5.10317257726295759279198185106496768539760E230L),
      double(-5.78227623036569554015377271242917142512200E233L),
      double(+6.67624821678358810322637794412809363451080E236L),
      double(-7.85353076444504163225916259639312444428230E239L),
      double(+9.41068940670587255245443288258762485293948E242L),
      double(-1.14849338734651839938498599206805592548354E246L),
      double(+1.42729587428487856771416320087122499897180E249L),
      double(-1.80595595869093090142285728117654560926719E252L),
      double(+2.32615353076608052161297985184708876161736E255L),
      double(-3.04957517154995947681942819261542593785327E258L),
      double(+4.06858060764339734424012124124937318633684E261L),
      double(-5.52310313219743616252320044093186392324280E264L),
      double(+7.62772793964343924869949690204961215533859E267L),
      double(-1.07155711196978863132793524001065396932667E271L),
      double(+1.53102008959691884453440916153355334355847E274L),
      double(-2.22448916821798346676602348865048510824835E277L),
      double(+3.28626791906901391668189736436895275365183E280L),
      double(-4.93559289559603449020711938191575963496999E283L),
      double(+7.53495712008325067212266049779283956727824E286L),
      double(-1.16914851545841777278088924731655041783900E290L),
      double(+1.84352614678389394126646201597702232396492E293L),
      double(-2.95368261729680829728014917350525183485207E296L),
      double(+4.80793212775015697668878704043264072227967E299L),
      double(-7.95021250458852528538243631671158693036798E302L),
      double(+1.33527841873546338750122832017820518292039E306L)
    }};

    return bernoulli_data[n];
  }

  template<>
  inline long double unchecked_bernoulli_b2n<long double>(unsigned n)
  {
    static const boost::array<long double, 130U> bernoulli_data =
    {{
      long double(+1.00000000000000000000000000000000000000000L),
      long double(+0.166666666666666666666666666666666666666667L),
      long double(-0.0333333333333333333333333333333333333333333L),
      long double(+0.0238095238095238095238095238095238095238095L),
      long double(-0.0333333333333333333333333333333333333333333L),
      long double(+0.0757575757575757575757575757575757575757576L),
      long double(-0.253113553113553113553113553113553113553114L),
      long double(+1.16666666666666666666666666666666666666667L),
      long double(-7.09215686274509803921568627450980392156863L),
      long double(+54.9711779448621553884711779448621553884712L),
      long double(-529.124242424242424242424242424242424242424L),
      long double(+6192.12318840579710144927536231884057971014L),
      long double(-86580.2531135531135531135531135531135531136L),
      long double(+1.42551716666666666666666666666666666666667E6L),
      long double(-2.72982310678160919540229885057471264367816E7L),
      long double(+6.01580873900642368384303868174835916771401E8L),
      long double(-1.51163157670921568627450980392156862745098E10L),
      long double(+4.29614643061166666666666666666666666666667E11L),
      long double(-1.37116552050883327721590879485616327721591E13L),
      long double(+4.88332318973593166666666666666666666666667E14L),
      long double(-1.92965793419400681486326681448632668144863E16L),
      long double(+8.41693047573682615000553709856035437430786E17L),
      long double(-4.03380718540594554130768115942028985507246E19L),
      long double(+2.11507486380819916056014539007092198581560E21L),
      long double(-1.20866265222965259346027311937082525317819E23L),
      long double(+7.50086674607696436685572007575757575757576E24L),
      long double(-5.03877810148106891413789303052201257861635E26L),
      long double(+3.65287764848181233351104308429711779448622E28L),
      long double(-2.84987693024508822262691464329106781609195E30L),
      long double(+2.38654274996836276446459819192192149717514E32L),
      long double(-2.13999492572253336658107447651910973926742E34L),
      long double(+2.05009757234780975699217330956723102516667E36L),
      long double(-2.09380059113463784090951852900279701847092E38L),
      long double(+2.27526964884635155596492603527692645814700E40L),
      long double(-2.62577102862395760473030497361582020814490E42L),
      long double(+3.21250821027180325182047923042649852435219E44L),
      long double(-4.15982781667947109139170744952623589366896E46L),
      long double(+5.69206954820352800238834562191210586444805E48L),
      long double(-8.21836294197845756922906534686173330145509E50L),
      long double(+1.25029043271669930167323398297028955241772E53L),
      long double(-2.00155832332483702749253291988132987687242E55L),
      long double(+3.36749829153643742333966769033387530162196E57L),
      long double(-5.94709705031354477186604968440515408405791E59L),
      long double(+1.10119103236279775595641307904376916046305E62L),
      long double(-2.13552595452535011886583850190410656789733E64L),
      long double(+4.33288969866411924196166130593792062184514E66L),
      long double(-9.18855282416693282262005552155018971389604E68L),
      long double(+2.03468967763290744934550279902200200659751E71L),
      long double(-4.70038339580357310785752555350060606545967E73L),
      long double(+1.13180434454842492706751862577339342678904E76L),
      long double(-2.83822495706937069592641563364817647382847E78L),
      long double(+7.40642489796788506297508271409209841768797E80L),
      long double(-2.00964548027566044834656196727153631868673E83L),
      long double(+5.66571700508059414457193460305193569614195E85L),
      long double(-1.65845111541362169158237133743199123014950E88L),
      long double(+5.03688599504923774192894219151801548124424E90L),
      long double(-1.58614682376581863693634015729664387827410E93L),
      long double(+5.17567436175456269840732406825071225612408E95L),
      long double(-1.74889218402171173396900258776181591451415E98L),
      long double(+6.11605199949521852558245252642641677807677E100L),
      long double(-2.21227769127078349422883234567129324455732E103L),
      long double(+8.27227767987709698542210624599845957312047E105L),
      long double(-3.19589251114157095835916343691808148735263E108L),
      long double(+1.27500822233877929823100243029266798669572E111L),
      long double(-5.25009230867741338994028246245651754469199E113L),
      long double(+2.23018178942416252098692981988387281437383E116L),
      long double(-9.76845219309552044386335133989802393011669E118L),
      long double(+4.40983619784529542722726228748131691918758E121L),
      long double(-2.05085708864640888397293377275830154864566E124L),
      long double(+9.82144332797912771075729696020975210414919E126L),
      long double(-4.84126007982088805087891967099634127611305E129L),
      long double(+2.45530888014809826097834674040886903996737E132L),
      long double(-1.28069268040847475487825132786017857218118E135L),
      long double(+6.86761671046685811921018885984644004360924E137L),
      long double(-3.78464685819691046949789954163795568144895E140L),
      long double(+2.14261012506652915508713231351482720966602E143L),
      long double(-1.24567271371836950070196429616376072194583E146L),
      long double(+7.43457875510001525436796683940520613117807E148L),
      long double(-4.55357953046417048940633332233212748767721E151L),
      long double(+2.86121128168588683453638472510172325229190E154L),
      long double(-1.84377235520338697276882026536287854875414E157L),
      long double(+1.21811545362210466995013165065995213558174E160L),
      long double(-8.24821871853141215484818457296893447301419E162L),
      long double(+5.72258779378329433296516498142978615918685E165L),
      long double(-4.06685305250591047267679693831158655602196E168L),
      long double(+2.95960920646420500628752695815851870426379E171L),
      long double(-2.20495225651894575090311752273445984836379E174L),
      long double(+1.68125970728895998058311525151360665754464E177L),
      long double(-1.31167362135569576486452806355817153004431E180L),
      long double(+1.04678940094780380821832853929823089643829E183L),
      long double(-8.54328935788337077185982546299082774593270E185L),
      long double(+7.12878213224865423522884066771438224721245E188L),
      long double(-6.08029314555358993000847118686477458461988E191L),
      long double(+5.29967764248499239300942910043247266228490E194L),
      long double(-4.71942591687458626443646229013379911103761E197L),
      long double(+4.29284137914029810894168296541074669045521E200L),
      long double(-3.98767449682322074434477655542938795106651E203L),
      long double(+3.78197804193588827138944181161393327898220E206L),
      long double(-3.66142336836811912436858082151197348755196E209L),
      long double(+3.61760902723728623488554609298914089477541E212L),
      long double(-3.64707726451913543621383088655499449048682E215L),
      long double(+3.75087554364544090983452410104814189306842E218L),
      long double(-3.93458672964390282694891288533713429355657E221L),
      long double(+4.20882111481900820046571171111494898242731E224L),
      long double(-4.59022962206179186559802940573325591059371E227L),
      long double(+5.10317257726295759279198185106496768539760E230L),
      long double(-5.78227623036569554015377271242917142512200E233L),
      long double(+6.67624821678358810322637794412809363451080E236L),
      long double(-7.85353076444504163225916259639312444428230E239L),
      long double(+9.41068940670587255245443288258762485293948E242L),
      long double(-1.14849338734651839938498599206805592548354E246L),
      long double(+1.42729587428487856771416320087122499897180E249L),
      long double(-1.80595595869093090142285728117654560926719E252L),
      long double(+2.32615353076608052161297985184708876161736E255L),
      long double(-3.04957517154995947681942819261542593785327E258L),
      long double(+4.06858060764339734424012124124937318633684E261L),
      long double(-5.52310313219743616252320044093186392324280E264L),
      long double(+7.62772793964343924869949690204961215533859E267L),
      long double(-1.07155711196978863132793524001065396932667E271L),
      long double(+1.53102008959691884453440916153355334355847E274L),
      long double(-2.22448916821798346676602348865048510824835E277L),
      long double(+3.28626791906901391668189736436895275365183E280L),
      long double(-4.93559289559603449020711938191575963496999E283L),
      long double(+7.53495712008325067212266049779283956727824E286L),
      long double(-1.16914851545841777278088924731655041783900E290L),
      long double(+1.84352614678389394126646201597702232396492E293L),
      long double(-2.95368261729680829728014917350525183485207E296L),
      long double(+4.80793212775015697668878704043264072227967E299L),
      long double(-7.95021250458852528538243631671158693036798E302L),
      long double(+1.33527841873546338750122832017820518292039E306L)
    }};

    return bernoulli_data[n];
  }

} } // namespace boost::math

#endif // _BOOST_BERNOULLI_2013_05_30_HPP_